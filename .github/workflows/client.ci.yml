name: CI (client)

on:
  workflow_dispatch:
  pull_request:
    branches: [ main ]
    paths:
      - 'client/**'
      - '.github/workflows/ci-client.yml'
  push:
    branches: [ main ]
    paths:
      - 'client/**'
      - '.github/workflows/ci-client.yml'

permissions:
  contents: read

jobs:
  test:
    name: Lint, Test, Build (${{ matrix.node }})
    runs-on: ubuntu-latest
    services:
      postgres:
        image: ankane/pgvector:15
        ports:
          - 5433:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5433/testdb
      JWT_ACCESS_SECRET: ${{ secrets.JWT_ACCESS_SECRET }}
      JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
      OPENAI_API_KEY: "fake_key"
      AI_API_KEY: "fake_key"
      
    timeout-minutes: 15
    strategy:
      matrix:
        node: [20]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: npm
          cache-dependency-path: client/package-lock.json

      - name: Install frontend deps
        working-directory: client
        run: npm ci
        
      - name: Install backend deps
        working-directory: backend
        run: npm ci
        
      - name: Lint
        working-directory: client
        run: npm run lint --if-present

      - name: Test (Jest)
        working-directory: client
        run: npm run test --if-present -- --ci --reporters=default --reporters=junit --outputFile=junit.xml || echo "test terminado"

      - name: Build
        working-directory: client
        run: npm run build --if-present
      
      - name: Setup Docker (infra)
        working-directory: infra/docker
        run: |
          docker compose -f minio.compose.yml up -d
          docker compose -f compose.dev.yml up -d

      - name: Setup DB
        working-directory: backend
        run: npx prisma migrate reset --force

      - name: Seed DB
        working-directory: backend
        run: npm run seed
      
      - name: E2E (Cypress)
        uses: cypress-io/github-action@v6
        with:
          working-directory: client
          start: npm run start:e2e
          wait-on: http://localhost:5173
          wait-on-timeout: 120
          command: npm run cypress:run -- --spec "cypress/e2e/login.spec.ts"

      - name: Upload artifacts (build y reportes)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-and-reports-${{ matrix.node }}
          path: |
            client/dist/**
            client/junit.xml
